/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing_nov_6th.salesdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing_nov_6th.salesdb.Sample;
import com.testing_nov_6th.salesdb.service.SampleService;


/**
 * Controller object for domain model class Sample.
 * @see Sample
 */
@RestController("salesdb.SampleController")
@Api(value = "SampleController", description = "Exposes APIs to work with Sample resource.")
@RequestMapping("/salesdb/Sample")
public class SampleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SampleController.class);

    @Autowired
	@Qualifier("salesdb.SampleService")
	private SampleService sampleService;

	@ApiOperation(value = "Creates a new Sample instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Sample createSample(@RequestBody Sample sample) {
		LOGGER.debug("Create Sample with information: {}" , sample);

		sample = sampleService.create(sample);
		LOGGER.debug("Created Sample with information: {}" , sample);

	    return sample;
	}

    @ApiOperation(value = "Returns the Sample instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sample getSample(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Sample with id: {}" , id);

        Sample foundSample = sampleService.getById(id);
        LOGGER.debug("Sample details with id: {}" , foundSample);

        return foundSample;
    }

    @ApiOperation(value = "Updates the Sample instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Sample editSample(@PathVariable("id") Integer id, @RequestBody Sample sample) throws EntityNotFoundException {
        LOGGER.debug("Editing Sample with id: {}" , sample.getId());

        sample.setId(id);
        sample = sampleService.update(sample);
        LOGGER.debug("Sample details with id: {}" , sample);

        return sample;
    }

    @ApiOperation(value = "Deletes the Sample instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSample(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Sample with id: {}" , id);

        Sample deletedSample = sampleService.delete(id);

        return deletedSample != null;
    }

    /**
     * @deprecated Use {@link #findSamples(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Sample instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sample> searchSamplesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Samples list");
        return sampleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sample instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sample> findSamples(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Samples list");
        return sampleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Sample instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sample> filterSamples(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Samples list");
        return sampleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSamples(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sampleService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Sample instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSamples( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Samples");
		return sampleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSampleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sampleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SampleService instance
	 */
	protected void setSampleService(SampleService service) {
		this.sampleService = service;
	}

}

