/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing_nov_6th.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing_nov_6th.salesdb.Sample;

/**
 * Service object for domain model class {@link Sample}.
 */
public interface SampleService {

    /**
     * Creates a new Sample. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Sample if any.
     *
     * @param sample Details of the Sample to be created; value cannot be null.
     * @return The newly created Sample.
     */
	Sample create(@Valid Sample sample);


	/**
	 * Returns Sample by given id if exists.
	 *
	 * @param sampleId The id of the Sample to get; value cannot be null.
	 * @return Sample associated with the given sampleId.
     * @throws EntityNotFoundException If no Sample is found.
	 */
	Sample getById(Integer sampleId) throws EntityNotFoundException;

    /**
	 * Find and return the Sample by given id if exists, returns null otherwise.
	 *
	 * @param sampleId The id of the Sample to get; value cannot be null.
	 * @return Sample associated with the given sampleId.
	 */
	Sample findById(Integer sampleId);


	/**
	 * Updates the details of an existing Sample. It replaces all fields of the existing Sample with the given sample.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Sample if any.
     *
	 * @param sample The details of the Sample to be updated; value cannot be null.
	 * @return The updated Sample.
	 * @throws EntityNotFoundException if no Sample is found with given input.
	 */
	Sample update(@Valid Sample sample) throws EntityNotFoundException;

    /**
	 * Deletes an existing Sample with the given id.
	 *
	 * @param sampleId The id of the Sample to be deleted; value cannot be null.
	 * @return The deleted Sample.
	 * @throws EntityNotFoundException if no Sample found with the given id.
	 */
	Sample delete(Integer sampleId) throws EntityNotFoundException;

	/**
	 * Find all Samples matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Samples.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Sample> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Samples matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Samples.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Sample> findAll(String query, Pageable pageable);

    /**
	 * Exports all Samples matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Samples in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Sample.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

